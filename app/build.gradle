apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        applicationId 'com.example.android.testing.blueprint'
        versionCode 1
        versionName '1.0'

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        /*
        The Android Testing Support Library collects analytics to continuously improve the testing
        experience. More specifically, it uploads a hash of the package name of the application
        under test for each invocation. If you do not wish to upload this data, you can opt-out by
        passing the following argument to the test runner: disableAnalytics "true".
         */
        // testInstrumentationRunnerArguments disableAnalytics: 'true'

        /*
        Uncomment this to pass custom arguments to AndroidJUnitRunner. If uncommented the
        custom argument "argument1" will be passed to AndroidJUnitRunner and make
        AndroidLibraryModuleIntegrationTest fail.
         */
        // testInstrumentationRunnerArgument "argument1", "make_test_fail"
    }

    buildTypes {
        debug {
            // Run code coverage reports by default on debug builds.
            testCoverageEnabled = true

            // Uncomment this to run test against a minified version of the production APK
            /*
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFile 'proguard-test-rules.pro'
             */
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "defaultDimension"

    productFlavors {
        flavor1 {
            applicationId 'com.example.android.testing.blueprint.flavor1'
        }

        flavor2 {
            applicationId 'com.example.android.testing.blueprint.flavor2'
        }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
}

dependencies {
    // App's dependencies, including test
    implementation "androidx.appcompat:appcompat:$rootProject.ext.supportLibVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"

    implementation project(':module-plain-kotlin') // Optional module for non-Android code
    implementation project(':module-android-library') // Optional module for additional Android code

    // Dependencies for local unit tests
    testImplementation "junit:junit:$rootProject.ext.junitVersion"
    testImplementation "org.mockito:mockito-all:$rootProject.ext.mockitoVersion"
    testImplementation "org.hamcrest:hamcrest-all:$rootProject.ext.hamcrestVersion"

    // Android Testing Support Library's runner and rules
    androidTestImplementation "androidx.test:runner:$rootProject.ext.runnerVersion"
    androidTestImplementation "androidx.test:rules:$rootProject.ext.rulesVersion"

    // https://github.com/android/android-test
    implementation "androidx.test:core-ktx:1.2.0"
    implementation "androidx.test.ext:junit:1.1.1"
    implementation "androidx.test.espresso:espresso-core:$rootProject.ext.espressoVersion"
    implementation "androidx.test.espresso:espresso-contrib:$rootProject.ext.espressoVersion"
    implementation "androidx.test.espresso:espresso-intents:$rootProject.ext.espressoVersion"

    // UIAutomator Testing. Learn about this dependency in this projects README file.
    androidTestImplementation "androidx.test.uiautomator:uiautomator:$rootProject.ext.uiautomatorVersion"

    // Resolve conflicts between main and test APK:
    androidTestImplementation "androidx.annotation:annotation:1.1.0"
}
